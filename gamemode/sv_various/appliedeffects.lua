---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by themaw.
--- DateTime: 12/21/24 6:17â€¯PM
---

entityWithEffects = entityWithEffects or {};

local insert = table.insert;
local yield = coroutine.yield;
local resume = coroutine.resume;
local CurTime = CurTime;
local routine;
local lastRun;
local tickDelay = 0.01;

---applyEffect
---@param entity userdata
---@param dataEffect void
---@param duration number
function applyEffect(entity, dataEffect, duration)
    -- Duration is less or equal to 0, so no effect will apply?
    if (duration <= 0) then
        return
    end

    -- It is possible to apply an effect without an entity, such as other items.
    dataEffect.Entity = entity;
    dataEffect.EndTime = CurTime() + duration;
    dataEffect.LastTime = CurTime();

    insert(entityWithEffects, dataEffect);
end

---tickEffect
local function tickEffect()
    while (true) do
        if (not next(entityWithEffects)) then
            yield();
        else
            for id, data in pairs(entityWithEffects) do
                yield();

                local pickTime = CurTime();

                -- This will cap delta to the EndTime of the effect, rather than overextend.
                if (data.EndTime <= pickTime) then
                    pickTime = data.EntTime;
                end

                -- Calculate delta for effect multiplier
                local delta = pickTime - data.LastTime;
                data.LastTime = pickTime;


                -- If there is a tick to run, then run it.
                if (data.Tick) then
                    data.Tick(delta, data);
                end

                -- If the effect has expired, remove it from the watchlist.
                if (data.EndTime <= pickTime) then
                    entityWithEffects[id] = nil;
                end
            end
        end
    end
end

hook.Add("Tick", "effectTicks", function()
    local now = CurTime();
    if (lastRun and lastRun > now) then
        return
    end

    lastRun = now + tickDelay;

    if (not routine or not resume(routine)) then
        routine = coroutine.create(tickEffect);
        resume(routine);
    end
end)